/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EX)
{
    use alu_operate;
    use ex_output;

    semantics
    {
        // Forward from MEM to EX
        if ((r_mem_rd == r_id_rf_src1) && (r_mem_rd != 0) && (r_mem_regwrite == true)) { 
            s_ex_dhf1_sel = DHF_WB;
        }
        else if((r_ex_rd == r_id_rf_src1) && (r_ex_rd != 0) && (r_ex_regwrite == true)) {
            s_ex_dhf1_sel = DHF_ME;
        }
        else{
            s_ex_dhf1_sel = DHF_REG;
        }

        if ((r_mem_rd == r_id_rf_src2) && (r_mem_rd !=0) && (r_mem_regwrite == true)) { 
            s_ex_dhf2_sel = DHF_WB;
        }
        else if((r_ex_rd == r_id_rf_src2) && (r_ex_rd !=0) && (r_ex_regwrite == true)) {
            s_ex_dhf2_sel = DHF_ME;
        }
        else{
            s_ex_dhf2_sel = DHF_REG;
        }

        // Set the input value to the forwarded value
        switch (s_ex_dhf1_sel) {
            case DHF_WB:
                s_ex_src1_val = r_mem_alu_result;
                break;
            case DHF_ME:
                s_ex_src1_val = r_ex_alu_result;
                break;
            case DHF_REG:
                s_ex_src1_val = r_id_rf_src1;
                break;
            default:
                s_ex_src1_val = 0;
                break;
        }

        switch (s_ex_dhf2_sel) {
            case DHF_WB:
                s_ex_src2_val = r_mem_alu_result;
                break;
            case DHF_ME:
                s_ex_src2_val = r_ex_alu_result;
                break;
            case DHF_REG:
                s_ex_src2_val = r_id_rf_src2;
                break;
            default:
                s_ex_src2_val = 0;
                break;
        }

        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_sl
        // control signal provided by the ID pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there is only one input which is the src1 register file, rf, value and
        // this input is from the ID pipeline register

        switch (r_id_src1_sl) {
            case ALU_SRC1_SEL_RF:
                s_ex_src1_operand = s_ex_src1_val;
                break;
            default:
                break;
        }


        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_sl
        // control signal provided by the ID pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there are two inputs to the source 2 operand mux, the src2 register, rf, value
        // and the immediate value.  Both of these inputs are from the ID pipeline register

        switch (r_id_src2_sl) {
            case ALU_SRC2_SEL_RF:
                s_ex_src2_operand = s_ex_src2_val;
                break;
            case ALU_SRC2_SEL_IMM:
                s_ex_src2_operand = r_id_src2_imm;
                break;
            default:
                break;
        }

        // HALT instruction detection used for simulation purposes until the load/store instructions
        // have been implemented
        if (r_id_halt == true)
        {
            codasip_info(INFO_GENERAL, "Halt instruction indicated");
//            codasip_store_exit_code(rf_xpr[GPR_RETVAL] & 0xFF);
            #pragma simulator
            {
                codasip_halt();
            }

        }

        // If not a halt operation, call ALU routine
        alu_operate();






        // Update the pipeline registers between the Execute (EX) and MEMORY (MEM) stages
        ex_output();
    };
};

event alu_operate : pipeline(pipe.EX)
{
    semantics
    {
        // A switch statement will be used to determine and evaluate the ALU operation using
        // the aluop code provided by the ID pipeline register whose value is determined
        // by the instruction decoder.
        //
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to aluop to build the complete name of input from ID pipeline register for this switch
        // statement?
        //
        // The value to assign in the case statements was added to ca_resources.codal earlier in
        // assignment 5

        switch (r_id_aluop) {
            case ALU_NOP:
                s_ex_alu_result = (uint32)0;
                break;
            case ALU_ADD:
                s_ex_alu_result = s_ex_src1_operand + s_ex_src2_operand;
                break;
            case ALU_SLT:
                s_ex_alu_result = s_ex_src1_operand < s_ex_src2_operand;
                break;
            case ALU_SLTU:
                s_ex_alu_result = (uint32)s_ex_src1_operand < (uint32)s_ex_src2_operand;
                break;
            case ALU_XOR:
                s_ex_alu_result = s_ex_src1_operand ^ s_ex_src2_operand;
                break;
            case ALU_OR:
                s_ex_alu_result = s_ex_src1_operand | s_ex_src2_operand;
                break;
            case ALU_AND:
                s_ex_alu_result = s_ex_src1_operand & s_ex_src2_operand;
                break;
            case ALU_SUB:
                s_ex_alu_result = s_ex_src1_operand - s_ex_src2_operand;
                break;
            case ALU_SLL:
                s_ex_alu_result = s_ex_src1_operand << (uint5)s_ex_src2_operand;
                break;
            case ALU_SRL:
                s_ex_alu_result = (uint32)s_ex_src1_operand >> (uint5)s_ex_src2_operand;
                break;
            case ALU_SRA:
                s_ex_alu_result = s_ex_src1_operand >> (uint5)s_ex_src2_operand;
                break;
            default:
                break;
        }

        // Select target address from PC+IMM or ALU based on if this is a jump instruction
        if (r_id_jump_inst) {
            s_ex_target_address = s_ex_alu_result;
        } else {
            s_ex_target_address = r_id_pc + r_id_src2_imm;
        }

        // Compare the ALU output to zero (set if zero) for branches
        if (s_ex_alu_result == (uint32)0) {
            s_ex_zero = true;
        } else {
            s_ex_zero = false;
        }

        // Select the register file output either from the PC+4 or the alu_result
        switch (r_id_rfwt) {
            case WB_ALU:
                s_ex_ex_output = s_ex_alu_result;
                break;
            case WB_PC:
                s_ex_ex_output = r_id_pc + 4;
                break;
            default:
                break;
        }

    };
};


event ex_output : pipeline(pipe.EX)
{
    semantics
    {
        // r_ex_alu_result
        // r_ex_rd
        // r_ex_regwrite
        // r_ex_branchop
        // r_ex_jump_inst
        // r_ex_mem_ops
        // r_ex_memread
        // r_ex_target_address
        //
        // Store the ALU result to the EX pipeline register
        // Use the pipeline register that you created earlier in Assignment 5 to pass the output
        // signal from the ALU switch statement from the alu_operate event

        r_ex_alu_result     =   s_ex_ex_output;
        r_ex_target_address =   s_ex_target_address;
        r_ex_zero           =   s_ex_zero;

        // Passing control signals to the next stage, MEM, through the EX pipeline register.  These
        // instruction decoder signals are being passed from the ID pipeline to the EX pipeline.
        //
        // Assign the proper ID pipeline register to the following EX pipeline registers.
        r_ex_rd             =   r_id_rd;
        r_ex_regwrite       =   r_id_regwrite;

        // Passing Decoder control-signals to the EX stage
        r_ex_branchop       =   r_id_branchop;
        r_ex_jump_inst      =   r_id_jump_inst;
        r_ex_mem_ops        =   r_id_mem_ops;
        r_ex_memread        =   r_id_memread;
    };
};

